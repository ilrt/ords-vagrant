[main]
ssl.enabled = false

#
# Setup for generating hashed passwords
#
hashService = org.apache.shiro.crypto.hash.DefaultHashService
hashService.hashIterations = 500000
hashService.hashAlgorithmName = SHA-256
hashService.generatePublicSalt = true

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordService.hashService = $hashService

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

#
# JDBC Realm for using Ords DB for permissions
#
ds = org.postgresql.jdbc2.optional.SimpleDataSource
ds.serverName = localhost
ds.user = ords
ds.password = ords
ds.databaseName = ordstest

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $ds
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT token FROM ordsuser WHERE principalname = ?
jdbcRealm.userRolesQuery = SELECT role FROM userrole WHERE principalname = ?
jdbcRealm.permissionsQuery = SELECT permission FROM permissions WHERE role = ?
jdbcRealm.credentialsMatcher = $passwordMatcher

jdbcRealm.authenticationCachingEnabled = false
jdbcRealm.authorizationCachingEnabled = false

#
# Set up realms and explicit ordering
#
securityManager.realms = $jdbcRealm

#
# SSO Sessions and cookies
#

# Sessions
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager
securityManager.sessionMode = native

# Session DAO
sessionDAO = uk.ac.ox.it.ords.security.SSOSessionDAO
securityManager.sessionManager.sessionDAO = $sessionDAO

# SSO Cookie
cookie = org.apache.shiro.web.servlet.SimpleCookie
cookie.name = SSOcookie
cookie.path = /
cookie.domain = localhost
securityManager.sessionManager.sessionIdCookie = $cookie

#Configure filter chains and filter parameters
authc.loginUrl = /api/1.0/user/login
logout.redirectUrl = /app/#/login

[urls]
/** = authc[permissive]
